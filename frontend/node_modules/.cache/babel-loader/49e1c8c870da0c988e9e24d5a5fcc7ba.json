{"ast":null,"code":"import axios from \"axios\";\nimport { AUTH_ERROR, REGISTER_FAIL, REGISTER_SUCCESS, UPDATE_USER, USER_LOADED } from \"../constants/userConstants\";\nimport setAuthToken from \"../utils/setAuthToken\"; //Load user\n\nexport const loadUser = () => async dispatch => {\n  if (localStorage.token) {\n    setAuthToken(localStorage.token);\n  }\n\n  try {\n    const res = await axios.get(\"http://localhost:8000/v1/api/auth\");\n    dispatch({\n      type: USER_LOADED,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: AUTH_ERROR\n    });\n  }\n};\nexport const updateUser = payload => {\n  return {\n    type: UPDATE_USER,\n    payload: payload\n  };\n}; //register\n\nexport const register = ({\n  username,\n  email,\n  password\n}) => async dispatch => {\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  };\n  const body = JSON.stringify({\n    username,\n    email,\n    password\n  }); //removed proxy from package.json\n  // \"proxy\": \"http://localhost:8000/v1\"\n\n  try {\n    const res = await axios.post(\"http://localhost:8000/v1/api/users\", body, config);\n    dispatch({\n      type: REGISTER_SUCCESS,\n      payload: res.data\n    });\n    dispatch(loadUser()); //console log token generated\n\n    console.log(res.data.token);\n  } catch (error) {\n    //loop through errors to get specific error\n    const errors = error.response.data.errors;\n\n    if (errors) {\n      console.log(errors);\n    }\n\n    dispatch({\n      type: REGISTER_FAIL\n    });\n    console.log(error);\n  }\n}; //login user\n\nexport const login = (email, password) => async dispatch => {\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  };\n  const body = JSON.stringify({\n    email,\n    password\n  });\n\n  try {\n    const res = await axios.post(\"http://localhost:8000/v1/api/auth\", body, config);\n    console.log(res.data);\n    dispatch({\n      type: LOGIN_SUCCESS,\n      payload: res.data\n    });\n    dispatch(loadUser());\n  } catch (error) {\n    //loop through errors to get specific error\n    const errors = error.response.data.errors;\n\n    if (errors) {\n      console.log(errors);\n    }\n\n    dispatch({\n      type: LOGIN_FAIL\n    });\n  }\n}; //logout / clear profile\n\nexport const logout = () => dispatch => {\n  dispatch({\n    type: LOGOUT\n  });\n};","map":{"version":3,"sources":["/Users/patrick/Desktop/Learn/Projects/3-bcnMin-v3/frontend/src/actions/userActions.js"],"names":["axios","AUTH_ERROR","REGISTER_FAIL","REGISTER_SUCCESS","UPDATE_USER","USER_LOADED","setAuthToken","loadUser","dispatch","localStorage","token","res","get","type","payload","data","err","updateUser","register","username","email","password","config","headers","body","JSON","stringify","post","console","log","error","errors","response","login","LOGIN_SUCCESS","LOGIN_FAIL","logout","LOGOUT"],"mappings":"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","sourcesContent":["import axios from \"axios\";\nimport { AUTH_ERROR, REGISTER_FAIL, REGISTER_SUCCESS, UPDATE_USER, USER_LOADED } from \"../constants/userConstants\";\nimport setAuthToken from \"../utils/setAuthToken\";\n\n//Load user\nexport const loadUser = () => async (dispatch) => {\n  if (localStorage.token) {\n    setAuthToken(localStorage.token);\n  }\n\n  try {\n    const res = await axios.get(\"http://localhost:8000/v1/api/auth\");\n    dispatch({\n      type: USER_LOADED,\n      payload: res.data,\n    });\n  } catch (err) {\n    dispatch({\n      type: AUTH_ERROR,\n    });\n  }\n};\n\nexport const updateUser = (payload)=>{\n    return{\n      type: UPDATE_USER,\n      payload:payload,\n    }\n}\n\n//register\nexport const register =\n  ({ username, email, password }) =>\n  async (dispatch) => {\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    };\n\n    const body = JSON.stringify({ username, email, password });\n    //removed proxy from package.json\n    // \"proxy\": \"http://localhost:8000/v1\"\n    try {\n      const res = await axios.post(\n        \"http://localhost:8000/v1/api/users\",\n        body,\n        config\n      );\n      dispatch({\n        type: REGISTER_SUCCESS,\n        payload: res.data,\n      });\n      dispatch(loadUser());\n      //console log token generated\n      console.log(res.data.token);\n    } catch (error) {\n      //loop through errors to get specific error\n      const errors = error.response.data.errors;\n      if (errors) {\n        console.log(errors);\n      }\n      dispatch({\n        type: REGISTER_FAIL,\n      });\n      console.log(error);\n    }\n  };\n\n//login user\nexport const login = (email, password) => async (dispatch) => {\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n  };\n\n  const body = JSON.stringify({ email, password });\n  try {\n    const res = await axios.post(\n      \"http://localhost:8000/v1/api/auth\",\n      body,\n      config\n    );\n    console.log(res.data)\n    dispatch({\n      type: LOGIN_SUCCESS,\n      payload: res.data,\n    });\n    dispatch(loadUser());\n  } catch (error) {\n    //loop through errors to get specific error\n    const errors = error.response.data.errors;\n    if (errors) {\n      console.log(errors);\n    }\n    dispatch({\n      type: LOGIN_FAIL,\n    });\n\n  }\n};\n\n//logout / clear profile\nexport const logout = () => (dispatch) => {\n  dispatch({\n    type: LOGOUT,\n  });\n}\n\n"]},"metadata":{},"sourceType":"module"}