{"ast":null,"code":"var _jsxFileName = \"/Users/patrick/Desktop/Learn/Projects/3-bcnMin-v3/client/src/pages/Connect.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { TextField, Button } from \"@material-ui/core\";\nimport { Card, CardContent, CardActions, Typography } from \"@material-ui/core\";\nimport Container from \"@material-ui/core/Container\";\nimport axios from \"axios\"; //redux and responsive buttons if logged in\n\nimport { connect, useSelector } from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Connect = ({\n  auth: {\n    isAuthenticated,\n    loading\n  }\n}) => {\n  _s();\n\n  const [comment, setComment] = useState(\"\");\n  const [comments, setComments] = useState([]);\n  const {\n    user = {}\n  } = useSelector(state => state.auth);\n  console.log({\n    user\n  });\n\n  const fetchComments = () => {\n    const comments = axios.get(`${process.env.REACT_APP_API}/v1/api/comments`).then(response => {\n      console.log(response.data);\n      setComments(response.data);\n    }).catch(error => {\n      alert(\"Error in fetching Comments Info\", error);\n    });\n  };\n\n  useEffect(() => {\n    fetchComments();\n  }, []);\n\n  const deleteComment = async id => {\n    console.log(id);\n    await axios.delete(`${process.env.REACT_APP_API}/v1/api/comments/${id}`).then(res => console.log(\"comment deleted\")).catch(err => console.log(err));\n    fetchComments();\n  };\n\n  const postComment = async e => {\n    e.preventDefault();\n    setComment(\"\");\n    const newComment = {\n      comment: comment\n    };\n    await axios.post(`${process.env.REACT_APP_API}/v1/api/comments`, newComment).then(res => console.log(res.data));\n    console.log(comment);\n    fetchComments();\n  };\n\n  console.log(comment);\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Connect\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), isAuthenticated ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [\" \", /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Add Comment\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: e => postComment(e),\n        children: [/*#__PURE__*/_jsxDEV(TextField, {\n          onChange: e => setComment(e.target.value),\n          className: \"\",\n          label: \"Comment\",\n          variant: \"outlined\",\n          color: \"success\",\n          fullWidth: true,\n          required: true,\n          value: comment\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          type: \"submit\",\n          variant: \"contained\",\n          color: \"success\",\n          children: \"Post Comment\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Login to post something\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"comments section\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this), comments.map(comment => {\n      return /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: /*#__PURE__*/_jsxDEV(Card, {\n          sx: {\n            minWidth: 275\n          },\n          children: [/*#__PURE__*/_jsxDEV(CardContent, {\n            children: [/*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"h5\",\n              component: \"div\",\n              children: comment.comment\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 93,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"h5\",\n              component: \"div\",\n              children: comment.user.username\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 96,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 15\n          }, this), \" \", user._id === comment.user._id ? /*#__PURE__*/_jsxDEV(CardActions, {\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              type: \"submit\",\n              value: comment._id,\n              onClick: () => deleteComment(comment._id),\n              children: \"Delete\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 102,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 17\n          }, this) : null]\n        }, comment._id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 13\n        }, this)\n      }, void 0, false);\n    })]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Connect, \"SVrzhe7cgBEKldwVm1movXpSONQ=\", false, function () {\n  return [useSelector];\n});\n\n_c = Connect;\nConnect.propTypes = {\n  auth: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n  auth: state.auth\n});\n\nexport default connect(mapStateToProps, null)(Connect);\n\nvar _c;\n\n$RefreshReg$(_c, \"Connect\");","map":{"version":3,"sources":["/Users/patrick/Desktop/Learn/Projects/3-bcnMin-v3/client/src/pages/Connect.js"],"names":["React","useEffect","useState","TextField","Button","Card","CardContent","CardActions","Typography","Container","axios","connect","useSelector","PropTypes","Connect","auth","isAuthenticated","loading","comment","setComment","comments","setComments","user","state","console","log","fetchComments","get","process","env","REACT_APP_API","then","response","data","catch","error","alert","deleteComment","id","delete","res","err","postComment","e","preventDefault","newComment","post","target","value","map","minWidth","username","_id","propTypes","object","isRequired","mapStateToProps"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { TextField, Button } from \"@material-ui/core\";\nimport { Card, CardContent, CardActions, Typography } from \"@material-ui/core\";\nimport Container from \"@material-ui/core/Container\";\nimport axios from \"axios\";\n//redux and responsive buttons if logged in\nimport { connect, useSelector } from \"react-redux\";\nimport PropTypes from \"prop-types\";\n\nconst Connect = ({ auth: { isAuthenticated, loading } }) => {\n  const [comment, setComment] = useState(\"\");\n  const [comments, setComments] = useState([]);\n  const { user = {} } = useSelector((state) => state.auth);\n\n  console.log({ user });\n\n  const fetchComments = () => {\n    const comments = axios\n      .get(`${process.env.REACT_APP_API}/v1/api/comments`)\n      .then((response) => {\n        console.log(response.data);\n        setComments(response.data);\n      })\n      .catch((error) => {\n        alert(\"Error in fetching Comments Info\", error);\n      });\n  };\n\n  useEffect(() => {\n    fetchComments();\n  }, []);\n\n  const deleteComment = async (id) => {\n    console.log(id);\n    await axios\n      .delete(`${process.env.REACT_APP_API}/v1/api/comments/${id}`)\n      .then((res) => console.log(\"comment deleted\"))\n      .catch((err) => console.log(err));\n    fetchComments();\n  };\n\n  const postComment = async (e) => {\n    e.preventDefault();\n    setComment(\"\");\n    const newComment = {\n      comment: comment,\n    };\n    await axios\n      .post(`${process.env.REACT_APP_API}/v1/api/comments`, newComment)\n      .then((res) => console.log(res.data));\n\n    console.log(comment);\n    fetchComments();\n  };\n\n  console.log(comment);\n\n  return (\n    <Container>\n      <h1>Connect</h1>\n      {isAuthenticated ? (\n        <>\n          {\" \"}\n          <h1>Add Comment</h1>\n          <form onSubmit={(e) => postComment(e)}>\n            <TextField\n              onChange={(e) => setComment(e.target.value)}\n              className=''\n              label='Comment'\n              variant='outlined'\n              color='success'\n              fullWidth\n              required\n              value={comment}\n            />\n\n            <Button type='submit' variant='contained' color='success'>\n              Post Comment\n            </Button>\n          </form>\n        </>\n      ) : (\n        <h1>Login to post something</h1>\n      )}\n\n      <h1>comments section</h1>\n\n      {comments.map((comment) => {\n        return (\n          <>\n            <Card sx={{ minWidth: 275 }} key={comment._id}>\n              <CardContent>\n                <Typography variant='h5' component='div'>\n                  {comment.comment}\n                </Typography>\n                <Typography variant='h5' component='div'>\n                  {comment.user.username}\n                </Typography>\n              </CardContent>{\" \"}\n              {user._id === comment.user._id ? (\n                <CardActions>\n                  <Button\n                    type='submit'\n                    value={comment._id}\n                    onClick={() => deleteComment(comment._id)}\n                  >\n                    Delete\n                  </Button>\n                </CardActions>\n              ) : null}\n            </Card>\n          </>\n        );\n      })}\n    </Container>\n  );\n};\n\nConnect.propTypes = {\n  auth: PropTypes.object.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  auth: state.auth,\n});\n\nexport default connect(mapStateToProps, null)(Connect);\n"]},"metadata":{},"sourceType":"module"}