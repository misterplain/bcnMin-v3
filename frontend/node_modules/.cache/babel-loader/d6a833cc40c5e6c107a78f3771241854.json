{"ast":null,"code":"import { REGISTER_SUCCESS, REGISTER_FAIL, USER_LOADED, AUTH_ERROR, LOGIN_SUCCESS, LOGIN_FAIL, LOGOUT, UPDATE_USER } from \"../actions/types\";\nconst initialState = {\n  token: localStorage.getItem(\"token\"),\n  isAuthenticated: null,\n  //make sure that when we load a user the loading is done, once we receive a response we'll set this to false\n  loading: true,\n  user: null\n};\nexport default function (state = initialState, action) {\n  const {\n    type,\n    payload\n  } = action; //user loaded and auth error\n\n  switch (type) {\n    case USER_LOADED:\n      return { ...state,\n        isAuthenticated: true,\n        loading: false,\n        user: payload\n      };\n\n    case REGISTER_SUCCESS:\n      localStorage.setItem(\"token\", payload.token);\n      return { ...state,\n        ...payload,\n        isAuthenticated: true,\n        loading: false\n      };\n\n    case LOGIN_SUCCESS:\n      localStorage.setItem(\"token\", payload.token);\n      return { ...state,\n        ...payload,\n        isAuthenticated: true,\n        loading: false\n      };\n\n    case REGISTER_FAIL:\n      localStorage.removeItem(\"token\");\n      return { ...state,\n        token: null,\n        isAuthenticated: false,\n        loading: false\n      };\n\n    case LOGIN_FAIL:\n      localStorage.removeItem(\"token\");\n      return { ...state,\n        token: null,\n        isAuthenticated: false,\n        loading: false\n      };\n\n    case AUTH_ERROR:\n      localStorage.removeItem(\"token\");\n      return { ...state,\n        isAuthenticated: false,\n        loading: false,\n        token: null\n      };\n\n    case LOGOUT:\n      localStorage.removeItem(\"token\");\n      return { ...state,\n        isAuthenticated: false,\n        loading: false,\n        token: null\n      };\n\n    case UPDATE_USER:\n      console.log(\"state\", state.user);\n      let cloneState = [...state];\n      cloneState.user.favorites;\n      return cloneState;\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/Users/patrick/Desktop/Learn/Projects/3-bcnMin-v3/client/src/reducers/auth.js"],"names":["REGISTER_SUCCESS","REGISTER_FAIL","USER_LOADED","AUTH_ERROR","LOGIN_SUCCESS","LOGIN_FAIL","LOGOUT","UPDATE_USER","initialState","token","localStorage","getItem","isAuthenticated","loading","user","state","action","type","payload","setItem","removeItem","console","log","cloneState","favorites"],"mappings":"AAAA,SACEA,gBADF,EAEEC,aAFF,EAGEC,WAHF,EAIEC,UAJF,EAKEC,aALF,EAMEC,UANF,EAOEC,MAPF,EAQEC,WARF,QASO,kBATP;AAWA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,KAAK,EAAEC,YAAY,CAACC,OAAb,CAAqB,OAArB,CADY;AAEnBC,EAAAA,eAAe,EAAE,IAFE;AAGnB;AACAC,EAAAA,OAAO,EAAE,IAJU;AAKnBC,EAAAA,IAAI,EAAE;AALa,CAArB;AAQA,eAAe,UAAUC,KAAK,GAAGP,YAAlB,EAAgCQ,MAAhC,EAAwC;AACrD,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAoBF,MAA1B,CADqD,CAErD;;AACA,UAAQC,IAAR;AACE,SAAKf,WAAL;AACE,aAAO,EACL,GAAGa,KADE;AAELH,QAAAA,eAAe,EAAE,IAFZ;AAGLC,QAAAA,OAAO,EAAE,KAHJ;AAILC,QAAAA,IAAI,EAAEI;AAJD,OAAP;;AAOF,SAAKlB,gBAAL;AACEU,MAAAA,YAAY,CAACS,OAAb,CAAqB,OAArB,EAA8BD,OAAO,CAACT,KAAtC;AACA,aAAO,EACL,GAAGM,KADE;AAEL,WAAGG,OAFE;AAGLN,QAAAA,eAAe,EAAE,IAHZ;AAILC,QAAAA,OAAO,EAAE;AAJJ,OAAP;;AAMF,SAAKT,aAAL;AACEM,MAAAA,YAAY,CAACS,OAAb,CAAqB,OAArB,EAA8BD,OAAO,CAACT,KAAtC;AACA,aAAO,EACL,GAAGM,KADE;AAEL,WAAGG,OAFE;AAGLN,QAAAA,eAAe,EAAE,IAHZ;AAILC,QAAAA,OAAO,EAAE;AAJJ,OAAP;;AAMF,SAAKZ,aAAL;AACES,MAAAA,YAAY,CAACU,UAAb,CAAwB,OAAxB;AACA,aAAO,EACL,GAAGL,KADE;AAELN,QAAAA,KAAK,EAAE,IAFF;AAGLG,QAAAA,eAAe,EAAE,KAHZ;AAILC,QAAAA,OAAO,EAAE;AAJJ,OAAP;;AAMF,SAAKR,UAAL;AACEK,MAAAA,YAAY,CAACU,UAAb,CAAwB,OAAxB;AACA,aAAO,EACL,GAAGL,KADE;AAELN,QAAAA,KAAK,EAAE,IAFF;AAGLG,QAAAA,eAAe,EAAE,KAHZ;AAILC,QAAAA,OAAO,EAAE;AAJJ,OAAP;;AAMF,SAAKV,UAAL;AACEO,MAAAA,YAAY,CAACU,UAAb,CAAwB,OAAxB;AACA,aAAO,EACL,GAAGL,KADE;AAELH,QAAAA,eAAe,EAAE,KAFZ;AAGLC,QAAAA,OAAO,EAAE,KAHJ;AAILJ,QAAAA,KAAK,EAAE;AAJF,OAAP;;AAOF,SAAKH,MAAL;AACEI,MAAAA,YAAY,CAACU,UAAb,CAAwB,OAAxB;AACA,aAAO,EACL,GAAGL,KADE;AAELH,QAAAA,eAAe,EAAE,KAFZ;AAGLC,QAAAA,OAAO,EAAE,KAHJ;AAILJ,QAAAA,KAAK,EAAE;AAJF,OAAP;;AAOF,SAAKF,WAAL;AACAc,MAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBP,KAAK,CAACD,IAA3B;AACE,UAAIS,UAAU,GAAG,CAAC,GAAGR,KAAJ,CAAjB;AACAQ,MAAAA,UAAU,CAACT,IAAX,CAAgBU,SAAhB;AACA,aAAOD,UAAP;;AAGF;AACE,aAAOR,KAAP;AAnEJ;AAqED","sourcesContent":["import {\n  REGISTER_SUCCESS,\n  REGISTER_FAIL,\n  USER_LOADED,\n  AUTH_ERROR,\n  LOGIN_SUCCESS,\n  LOGIN_FAIL,\n  LOGOUT,\n  UPDATE_USER,\n} from \"../actions/types\";\n\nconst initialState = {\n  token: localStorage.getItem(\"token\"),\n  isAuthenticated: null,\n  //make sure that when we load a user the loading is done, once we receive a response we'll set this to false\n  loading: true,\n  user: null,\n};\n\nexport default function (state = initialState, action) {\n  const { type, payload } = action;\n  //user loaded and auth error\n  switch (type) {\n    case USER_LOADED:\n      return {\n        ...state,\n        isAuthenticated: true,\n        loading: false,\n        user: payload,\n      };\n\n    case REGISTER_SUCCESS:\n      localStorage.setItem(\"token\", payload.token);\n      return {\n        ...state,\n        ...payload,\n        isAuthenticated: true,\n        loading: false,\n      };\n    case LOGIN_SUCCESS:\n      localStorage.setItem(\"token\", payload.token);\n      return {\n        ...state,\n        ...payload,\n        isAuthenticated: true,\n        loading: false,\n      };\n    case REGISTER_FAIL:\n      localStorage.removeItem(\"token\");\n      return {\n        ...state,\n        token: null,\n        isAuthenticated: false,\n        loading: false,\n      };\n    case LOGIN_FAIL:\n      localStorage.removeItem(\"token\");\n      return {\n        ...state,\n        token: null,\n        isAuthenticated: false,\n        loading: false,\n      };\n    case AUTH_ERROR:\n      localStorage.removeItem(\"token\");\n      return {\n        ...state,\n        isAuthenticated: false,\n        loading: false,\n        token: null,\n      };\n\n    case LOGOUT:\n      localStorage.removeItem(\"token\");\n      return {\n        ...state,\n        isAuthenticated: false,\n        loading: false,\n        token: null,\n      };\n\n    case UPDATE_USER: \n    console.log(\"state\", state.user);\n      let cloneState = [...state];\n      cloneState.user.favorites;\n      return cloneState;\n     \n   \n    default:\n      return state;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}