{"ast":null,"code":"var _jsxFileName = \"/Users/patrick/Desktop/Learn/Projects/3-bcnMin-v3/client/src/pages/Register.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { Redirect } from \"react-router-dom\";\nimport { Button, Container, Grid, Typography } from \"@material-ui/core\";\nimport { useHistory } from \"react-router-dom\";\nimport * as Yup from \"yup\";\nimport { useFormik } from \"formik\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Title from \"../ui/Title\";\nimport { makeStyles } from \"@material-ui/core/styles\"; //redux\n\nimport { connect } from \"react-redux\";\nimport { register } from \"../actions/auth\";\nimport PropTypes from \"prop-types\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles({\n  formContainer: {\n    display: \"flex\",\n    marginLeft: \"auto\",\n    marginRight: \"auto\",\n    width: \"100%\",\n    justifyContent: \"center\"\n  },\n  textField: {\n    margin: \"10px\"\n  },\n  formButton: {\n    marginTop: \"1rem\",\n    width: \"40%\",\n    marginLeft: \"30%\",\n    marginRight: \"30%\"\n  },\n  registerLine: {\n    display: \"flex\",\n    justifyContent: \"center\",\n    alignItems: \"center\"\n  }\n});\nconst validationSchema = Yup.object({\n  username: Yup.string().required(\"Please provide a username\"),\n  email: Yup.string().required(\"Please provide an email\"),\n  password: Yup.string().min(6).required(\"Please provide a password of at least 6 characters\"),\n  password2: Yup.string().oneOf([Yup.ref(\"password\"), null], \"Passwords must match\")\n});\n\nconst Register = ({\n  setAlert,\n  register,\n  isAuthenticated\n}) => {\n  _s();\n\n  const styles = useStyles();\n  const history = useHistory();\n  const [username, setUsername] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [password2, setPassword2] = useState(\"\"); // const [usernameError, setUsernameError] = useState(false);\n  // const [emailError, setEmailError] = useState(false);\n  // const [passwordError, setPasswordError] = useState(false);\n  // const [password2Error, setPassword2Error] = useState(false);\n  // const handleSubmit = async (e) => {\n  //   console.log(username, email, password);\n  //   e.preventDefault();\n  //   if (username === \"\") {\n  //     setUsernameError(true);\n  //   }\n  //   if (email === \"\") {\n  //     setEmailError(true);\n  //   }\n  //   if (password === \"\") {\n  //     setPasswordError(true);\n  //   }\n  //   if (password2 !== password) {\n  //     setPassword2Error(true);\n  //   }\n  //   register({ username, email, password });\n  // };\n\n  const formik = useFormik({\n    initialValues: {\n      username: \"\",\n      email: \"\",\n      password: \"\",\n      password2: \"\"\n    },\n    validationSchema,\n    onSubmit: async values => {\n      console.log(values);\n      register({\n        username,\n        email,\n        password\n      });\n    }\n  });\n\n  if (isAuthenticated) {\n    return /*#__PURE__*/_jsxDEV(Redirect, {\n      to: \"/inform\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 12\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(Grid, {\n    container: true,\n    spacing: 1,\n    direction: \"column\",\n    children: [/*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      xs: 12,\n      children: /*#__PURE__*/_jsxDEV(Title, {\n        title: \"register\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      xs: 12,\n      md: 8,\n      className: styles.formContainer,\n      children: /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: formik.handleSubmit,\n        children: [/*#__PURE__*/_jsxDEV(TextField, {\n          onChange: formik.handleChange,\n          id: \"username\",\n          className: styles.textField,\n          label: \"Username\",\n          variant: \"outlined\",\n          color: \"success\",\n          fullWidth: true,\n          required: true,\n          value: username\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          onChange: formik.handleChange,\n          id: \"email\",\n          className: styles.textField,\n          label: \"Email\",\n          variant: \"outlined\",\n          color: \"success\",\n          fullWidth: true,\n          required: true,\n          value: email\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          onChange: formik.handleChange,\n          className: styles.textField,\n          label: \"Password\",\n          variant: \"outlined\",\n          color: \"success\",\n          fullWidth: true,\n          required: true,\n          value: password\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          onChange: formik.handleChange,\n          className: styles.textField,\n          label: \"Confirm Password\",\n          variant: \"outlined\",\n          color: \"success\",\n          fullWidth: true,\n          required: true,\n          value: password2\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          type: \"submit\",\n          variant: \"contained\",\n          color: \"success\",\n          className: styles.formButton,\n          children: \"Register\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      xs: 12,\n      className: styles.registerLine,\n      children: [/*#__PURE__*/_jsxDEV(Typography, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 9\n      }, this), \"Already have an account?\", /*#__PURE__*/_jsxDEV(Button, {\n        onClick: () => history.push(\"/login\"),\n        children: \"Login\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 9\n      }, this), \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 99,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Register, \"iWA//f2ZCfS9jpxCkpHyXATvPHE=\", false, function () {\n  return [useStyles, useHistory, useFormik];\n});\n\n_c = Register;\nRegister.propTypes = {\n  setAlert: PropTypes.func.isRequired,\n  register: PropTypes.func.isRequired,\n  isAuthenticated: PropTypes.bool\n};\n\nconst mapStateToProps = state => ({\n  isAuthenticated: state.auth.isAuthenticated,\n  error: state.error\n});\n\nexport default connect(mapStateToProps, {\n  register\n})(Register);\n\nvar _c;\n\n$RefreshReg$(_c, \"Register\");","map":{"version":3,"sources":["/Users/patrick/Desktop/Learn/Projects/3-bcnMin-v3/client/src/pages/Register.js"],"names":["React","useState","Redirect","Button","Container","Grid","Typography","useHistory","Yup","useFormik","TextField","Title","makeStyles","connect","register","PropTypes","useStyles","formContainer","display","marginLeft","marginRight","width","justifyContent","textField","margin","formButton","marginTop","registerLine","alignItems","validationSchema","object","username","string","required","email","password","min","password2","oneOf","ref","Register","setAlert","isAuthenticated","styles","history","setUsername","setEmail","setPassword","setPassword2","formik","initialValues","onSubmit","values","console","log","handleSubmit","handleChange","push","propTypes","func","isRequired","bool","mapStateToProps","state","auth","error"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { Redirect } from \"react-router-dom\";\nimport { Button, Container, Grid, Typography } from \"@material-ui/core\";\nimport { useHistory } from \"react-router-dom\";\nimport * as Yup from \"yup\";\nimport { useFormik } from \"formik\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Title from \"../ui/Title\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n//redux\nimport { connect } from \"react-redux\";\nimport { register } from \"../actions/auth\";\nimport PropTypes from \"prop-types\";\n\nconst useStyles = makeStyles({\n  formContainer: {\n    display: \"flex\",\n    marginLeft: \"auto\",\n    marginRight: \"auto\",\n    width: \"100%\",\n    justifyContent: \"center\",\n  },\n  textField: {\n    margin: \"10px\",\n  },\n  formButton: {\n    marginTop: \"1rem\",\n    width: \"40%\",\n    marginLeft: \"30%\",\n    marginRight: \"30%\",\n  },\n  registerLine: {\n    display: \"flex\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n  },\n});\n\nconst validationSchema = Yup.object({\n  username: Yup.string().required(\"Please provide a username\"),\n  email: Yup.string().required(\"Please provide an email\"),\n  password: Yup.string()\n    .min(6)\n    .required(\"Please provide a password of at least 6 characters\"),\n  password2: Yup.string().oneOf(\n    [Yup.ref(\"password\"), null],\n    \"Passwords must match\"\n  ),\n});\n\nconst Register = ({ setAlert, register, isAuthenticated }) => {\n  const styles = useStyles();\n  const history = useHistory();\n  const [username, setUsername] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [password2, setPassword2] = useState(\"\");\n  // const [usernameError, setUsernameError] = useState(false);\n  // const [emailError, setEmailError] = useState(false);\n  // const [passwordError, setPasswordError] = useState(false);\n  // const [password2Error, setPassword2Error] = useState(false);\n\n  // const handleSubmit = async (e) => {\n  //   console.log(username, email, password);\n  //   e.preventDefault();\n  //   if (username === \"\") {\n  //     setUsernameError(true);\n  //   }\n  //   if (email === \"\") {\n  //     setEmailError(true);\n  //   }\n  //   if (password === \"\") {\n  //     setPasswordError(true);\n  //   }\n  //   if (password2 !== password) {\n  //     setPassword2Error(true);\n  //   }\n  //   register({ username, email, password });\n  // };\n  const formik = useFormik({\n    initialValues: {\n      username: \"\",\n      email: \"\",\n      password: \"\",\n      password2: \"\",\n    },\n    validationSchema,\n    onSubmit: async (values) => {\n      console.log(values);\n      register({username, email, password});\n    },\n  });\n\n  if (isAuthenticated) {\n    return <Redirect to='/inform' />;\n  }\n\n  return (\n    <Grid container spacing={1} direction='column'>\n      <Grid item xs={12}>\n        <Title title='register' />\n      </Grid>\n      <Grid item xs={12} md={8} className={styles.formContainer}>\n        <form onSubmit={formik.handleSubmit}>\n          <TextField\n            onChange={formik.handleChange}\n            id='username'\n            className={styles.textField}\n            label='Username'\n            variant='outlined'\n            color='success'\n            fullWidth\n            required\n            value={username}\n\n          />\n          <TextField\n            onChange={formik.handleChange}\n            id='email'\n            className={styles.textField}\n            label='Email'\n            variant='outlined'\n            color='success'\n            fullWidth\n            required\n            value={email}\n\n          />\n          <TextField\n            onChange={formik.handleChange}\n            className={styles.textField}\n            label='Password'\n            variant='outlined'\n            color='success'\n            fullWidth\n            required\n            value={password}\n\n          />\n          <TextField\n            onChange={formik.handleChange}\n            className={styles.textField}\n            label='Confirm Password'\n            variant='outlined'\n            color='success'\n            fullWidth\n            required\n            value={password2}\n          />\n          <Button\n            type='submit'\n            variant='contained'\n            color='success'\n            className={styles.formButton}\n          >\n            Register\n          </Button>\n        </form>\n      </Grid>\n      <Grid item xs={12} className={styles.registerLine}>\n        <Typography />\n        Already have an account?\n        <Button onClick={() => history.push(\"/login\")}>Login</Button>\n        <Typography />{\" \"}\n      </Grid>\n    </Grid>\n  );\n};\n\nRegister.propTypes = {\n  setAlert: PropTypes.func.isRequired,\n  register: PropTypes.func.isRequired,\n  isAuthenticated: PropTypes.bool,\n};\n\nconst mapStateToProps = (state) => ({\n  isAuthenticated: state.auth.isAuthenticated,\n  error: state.error,\n});\n\nexport default connect(mapStateToProps, { register })(Register);\n"]},"metadata":{},"sourceType":"module"}