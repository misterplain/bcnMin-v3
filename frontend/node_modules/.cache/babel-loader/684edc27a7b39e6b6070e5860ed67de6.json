{"ast":null,"code":"import { UPDATE_COMMENTS } from \"../actions/types\";\nconst initialState = {\n  messages: [],\n  loading: false,\n  error: null\n};\nexport default function (state = initialState, action) {\n  var _action$payload;\n\n  const {\n    type,\n    payload\n  } = action;\n\n  switch (type) {\n    case GET_MESSAGES_LOADING:\n      return { ...state,\n        isLoading: true\n      };\n\n    case GET_MESSAGES_SUCCESS:\n      return { ...state,\n        isLoading: false,\n        messages: payload.messages\n      };\n\n    case GET_MESSAGES_FAIL:\n      return { ...state,\n        isLoading: false,\n        error: payload.error\n      };\n\n    case UPDATE_COMMENTS:\n      let commentState = { ...state\n      };\n\n      if ((_action$payload = action.payload) === null || _action$payload === void 0 ? void 0 : _action$payload.isAddComment) {\n        commentState.messages = [...commentState.messages, action.payload.comment];\n        console.log(\"reducer accesed\");\n      } else {\n        var _commentState$message;\n\n        commentState.messages = (_commentState$message = commentState.messages) === null || _commentState$message === void 0 ? void 0 : _commentState$message.filter(comment => comment.id !== action.payload.comment.id);\n      }\n\n      return commentState;\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/Users/patrick/Desktop/Learn/Projects/3-bcnMin-v3/client/src/reducers/comments.js"],"names":["UPDATE_COMMENTS","initialState","messages","loading","error","state","action","type","payload","GET_MESSAGES_LOADING","isLoading","GET_MESSAGES_SUCCESS","GET_MESSAGES_FAIL","commentState","isAddComment","comment","console","log","filter","id"],"mappings":"AAAA,SAASA,eAAT,QAAgC,kBAAhC;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,QAAQ,EAAE,EADS;AAEnBC,EAAAA,OAAO,EAAE,KAFU;AAGnBC,EAAAA,KAAK,EAAE;AAHY,CAArB;AAMA,eAAe,UAAUC,KAAK,GAAGJ,YAAlB,EAAgCK,MAAhC,EAAwC;AAAA;;AACrD,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAoBF,MAA1B;;AACA,UAAQC,IAAR;AACE,SAAKE,oBAAL;AACE,aAAO,EACL,GAAGJ,KADE;AAELK,QAAAA,SAAS,EAAE;AAFN,OAAP;;AAKF,SAAKC,oBAAL;AACE,aAAO,EACL,GAAGN,KADE;AAELK,QAAAA,SAAS,EAAE,KAFN;AAGLR,QAAAA,QAAQ,EAAEM,OAAO,CAACN;AAHb,OAAP;;AAMF,SAAKU,iBAAL;AACE,aAAO,EACL,GAAGP,KADE;AAELK,QAAAA,SAAS,EAAE,KAFN;AAGLN,QAAAA,KAAK,EAAEI,OAAO,CAACJ;AAHV,OAAP;;AAMF,SAAKJ,eAAL;AACE,UAAIa,YAAY,GAAG,EAAE,GAAGR;AAAL,OAAnB;;AACA,6BAAIC,MAAM,CAACE,OAAX,oDAAI,gBAAgBM,YAApB,EAAkC;AAChCD,QAAAA,YAAY,CAACX,QAAb,GAAwB,CACtB,GAAGW,YAAY,CAACX,QADM,EAEtBI,MAAM,CAACE,OAAP,CAAeO,OAFO,CAAxB;AAIAC,QAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ;AACD,OAND,MAMO;AAAA;;AACLJ,QAAAA,YAAY,CAACX,QAAb,4BAAwBW,YAAY,CAACX,QAArC,0DAAwB,sBAAuBgB,MAAvB,CACrBH,OAAD,IAAaA,OAAO,CAACI,EAAR,KAAeb,MAAM,CAACE,OAAP,CAAeO,OAAf,CAAuBI,EAD7B,CAAxB;AAGD;;AACD,aAAON,YAAP;;AAEF;AACE,aAAOR,KAAP;AArCJ;AAuCD","sourcesContent":["import { UPDATE_COMMENTS } from \"../actions/types\";\n\nconst initialState = {\n  messages: [],\n  loading: false,\n  error: null,\n};\n\nexport default function (state = initialState, action) {\n  const { type, payload } = action;\n  switch (type) {\n    case GET_MESSAGES_LOADING:\n      return {\n        ...state,\n        isLoading: true,\n      };\n\n    case GET_MESSAGES_SUCCESS:\n      return {\n        ...state,\n        isLoading: false,\n        messages: payload.messages,\n      };\n\n    case GET_MESSAGES_FAIL:\n      return {\n        ...state,\n        isLoading: false,\n        error: payload.error,\n      };\n\n    case UPDATE_COMMENTS:\n      let commentState = { ...state };\n      if (action.payload?.isAddComment) {\n        commentState.messages = [\n          ...commentState.messages,\n          action.payload.comment,\n        ];\n        console.log(\"reducer accesed\");\n      } else {\n        commentState.messages = commentState.messages?.filter(\n          (comment) => comment.id !== action.payload.comment.id\n        );\n      }\n      return commentState;\n\n    default:\n      return state;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}