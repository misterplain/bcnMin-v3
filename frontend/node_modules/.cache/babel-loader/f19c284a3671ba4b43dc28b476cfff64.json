{"ast":null,"code":"import { createStore, combineReducers, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport logger from \"redux-logger\";\nimport thunk from 'redux-thunk';\nconst reducer = combineReducers({}); //userInfo stored in local storage\n\nconst userInfoFromStorage = localStorage.getItem(\"userInfo\") ? JSON.parse(localStorage.getItem(\"userInfo\")) : null;\nconst initialState = {\n  userLogin: {\n    userInfo: userInfoFromStorage\n  }\n};\nconst middlewareList = process.env.NODE_ENV === 'production' ? [thunk] : [thunk, logger];\nconst store = createStore(rootReducer, applyMiddleware(...middlewareList));\nexport default store;","map":{"version":3,"sources":["/Users/patrick/Desktop/Learn/Projects/3-bcnMin-v3/frontend/src/store.js"],"names":["createStore","combineReducers","applyMiddleware","composeWithDevTools","logger","thunk","reducer","userInfoFromStorage","localStorage","getItem","JSON","parse","initialState","userLogin","userInfo","middlewareList","process","env","NODE_ENV","store","rootReducer"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,eAAtB,EAAuCC,eAAvC,QAA6D,OAA7D;AACA,SAASC,mBAAT,QAAoC,0BAApC;AACA,OAAOC,MAAP,MAAmB,cAAnB;AACA,OAAOC,KAAP,MAAkB,aAAlB;AAEA,MAAMC,OAAO,GAAGL,eAAe,CAAC,EAAD,CAA/B,C,CAME;;AACA,MAAMM,mBAAmB,GAAGC,YAAY,CAACC,OAAb,CAAqB,UAArB,IAC1BC,IAAI,CAACC,KAAL,CAAWH,YAAY,CAACC,OAAb,CAAqB,UAArB,CAAX,CAD0B,GAE1B,IAFF;AAIA,MAAMG,YAAY,GAAG;AACnBC,EAAAA,SAAS,EAAE;AAACC,IAAAA,QAAQ,EAAEP;AAAX;AADQ,CAArB;AAIA,MAAMQ,cAAc,GAAGC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwC,CAACb,KAAD,CAAxC,GAAkD,CAACA,KAAD,EAAQD,MAAR,CAAzE;AAGF,MAAMe,KAAK,GAAGnB,WAAW,CAACoB,WAAD,EAAclB,eAAe,CAAC,GAAGa,cAAJ,CAA7B,CAAzB;AAEA,eAAeI,KAAf","sourcesContent":["import { createStore, combineReducers, applyMiddleware} from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport logger from \"redux-logger\"\nimport thunk from 'redux-thunk';\n\nconst reducer = combineReducers({\n\n});\n\n\n\n  //userInfo stored in local storage\n  const userInfoFromStorage = localStorage.getItem(\"userInfo\")\n  ? JSON.parse(localStorage.getItem(\"userInfo\"))\n  : null;\n\n  const initialState = {\n    userLogin: {userInfo: userInfoFromStorage} \n};\n\n  const middlewareList = process.env.NODE_ENV === 'production' ? [thunk] : [thunk, logger];\n\n\nconst store = createStore(rootReducer, applyMiddleware(...middlewareList));\n\nexport default store"]},"metadata":{},"sourceType":"module"}